Lab 11

The purpose of this lab is to help reinforce heap and priority queue implementations in C++. Specifically, the lab is 
to problem 2 on page 582 of the text. Note that you will need to implement a heap class (use a vector instead of a 
dynamic array) and then use the heap class to implement a priority queue.  You need to construct a test program to 
help test the correctness of your code. You need to use heap.h and priority_queue.h.

     2. Repeat Project 1, with no predefined limit
	on the size of the heap. Use a dynamic array.

     1. Using a heap, implement the priority queue
	class from Section 8.4. The class should
	have a static constant member variable,
	CAPACITY, which is the maximum size of the heap
	(as in the solution to Self-Test Exercise 2) and an array,
	data, that contains the heap with the entries.
	We also want to have FIFO behavior for entries with
	equal priority. To obtain this behavior, the class
	should have an extra private member variable that is
	an array, order, where order[i] contains the order
	in which data[i] was added to the queue. For example,
	if entry[7] was the 33rd item added to the
	priority queue, then order[7] would be 33. When
	you are comparing two entries with equal priority,
	use the order number to “break the tie” (so that if
	two entries have the same priority number, then the
	one with the earlier order number will come out of
	the priority queue first). 
